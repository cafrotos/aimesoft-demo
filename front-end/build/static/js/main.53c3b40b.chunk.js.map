{"version":3,"sources":["constant.js","components/Routes/PrivateRoute.js","components/Routes/PublicRoute.js","views/Login/index.jsx","views/Address/index.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","GET_DATA_URL","PrivateRoute","props","verifyToken","a","async","token","localStorage","getItem","setState","isLogin","Axios","url","method","headers","removeItem","state","this","Component","component","rest","from","to","key","location","pathname","render","React","withRouter","PublicRoute","Login","onChangeInput","name","event","target","value","onBlur","login","username","password","disabled","data","response","status","setItem","message","gutter","style","display","justifyContent","paddingTop","height","width","span","fontSize","padding","textAlign","htmlFor","Item","help","usernameErr","onChange","passwordErr","Password","className","alignItems","flexDirection","type","onClick","columns","title","dataIndex","Address","getListProvinces","fnsGetProvincePopulations","map","province","getProvincePopulation","id","Promise","all","provincePopulations","datasource","index","population","districts","loading","getDistrictPopulation","proId","disId","getDistrict","onExplandedProvince","expanded","record","expandedRowKeys","push","getedDistrict","includes","fnsGetDistrictPopulations","district","districtPopulations","districtsMap","splice","indexOf","margin","dataSource","onExpand","expandedRowRender","pagination","App","exact","path","p","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53c3b40b.chunk.js","sourcesContent":["export const BASE_URL = \"http://localhost:3000\"\nexport const GET_DATA_URL = \"http://mockserver-quantv.herokuapp.com\"","import { Route, Redirect, withRouter } from 'react-router-dom';\nimport React from 'react';\nimport { BASE_URL } from '../../constant';\nimport Axios from 'axios';\n\n\nclass PrivateRoute extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogin: localStorage.getItem('accessToken') ? true : false,\n    }\n  }\n\n  componentDidMount() {\n    this.verifyToken()\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if(this.state.isLogin) {\n  //     console.log(\"aaa\")\n  //     this.verifyToken()\n  //   } \n  // }\n\n  verifyToken = async () => {\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      return this.setState({ isLogin: false });\n    }\n    try {\n      await Axios({\n        url: BASE_URL + \"/me\",\n        method: \"GET\",\n        headers: {\n          \"authorization\": \"Bearer \" + token\n        }\n      })\n    } catch (error) {\n      localStorage.removeItem(\"accessToken\")\n      return this.setState({ isLogin: false })\n    }\n  }\n\n  render() {\n    const { component: Component, ...rest } = this.props;\n    const { isLogin } = this.state;\n    if (!isLogin) {\n      return (<Redirect\n        to={{\n          pathname: \"/login\",\n          state: { from: this.props.location }\n        }}\n      />)\n    }\n    return (\n      this.props.from === '/' ?\n        <Redirect\n          to={this.props.to}\n          key={this.props.location.pathname}\n          render={props => (\n            <Component {...this.props} />\n          )}\n        /> :\n        <Route\n          {...rest}\n          key={this.props.location.pathname}\n          render={props => (\n            <Component {...this.props} />\n          )}\n        />\n    )\n  }\n}\n\nexport default withRouter(PrivateRoute);","import { Route, Redirect } from 'react-router-dom';\nimport React from 'react';\n\nconst checkToken = () => {\n  let token = localStorage.getItem(\"accessToken\");\n  if (token === null) return true;\n  return false;\n}\n\nconst PublicRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props => checkToken() ?\n      <Component {...props} /> :\n      <Redirect\n        to={{\n          pathname: \"/address\",\n          state: { from: props.location }\n        }}\n      />}\n  />\n);\n\nexport default PublicRoute;","import React from 'react';\nimport { Redirect, withRouter} from 'react-router-dom'\nimport { Row, Col, Input, Button, Form } from 'antd';\nimport Axios from 'axios';\nimport { BASE_URL } from '../../constant';\nimport './style.less'\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      disabled: false\n    }\n  }\n\n  onChangeInput = name => (event) => {\n    this.setState({\n      [name]: event.target.value,\n      disabled: false,\n      [`${name}Err`]: \"\"\n    })\n  }\n\n  onBlur = name => () => {\n    if (!this.state[name] && !this.state[`${name}Err`]) {\n      return this.setState({\n        [`${name}Err`]: \"Please input your \" + name,\n        disabled: true\n      })\n    }\n  }\n\n  login = async () => {\n    if (!this.state.username || !this.state.password) {\n      return this.setState({ disabled: true })\n    }\n    try {\n      const response = await Axios({\n        url: BASE_URL + \"/login\",\n        method: \"POST\",\n        data: {\n          username: this.state.username,\n          password: this.state.password\n        }\n      })\n      if (response.status === 200) {\n        localStorage.setItem(\"accessToken\", response.data.token)\n        this.setState({ isLogin: true })\n      }\n    } catch (error) {\n      this.setState({ message: \"Username or password not match\" })\n    }\n  }\n\n  render() {\n    if (this.state.isLogin) {\n      return (<Redirect\n        to={{\n          pathname: \"/address\",\n          state: { from: this.props.location }\n        }}\n      />)\n    }\n    return (\n      <Row gutter={[16, 16]} style={{ display: \"flex\", justifyContent: \"center\", paddingTop: \"5%\", height: \"100vh\", width: \"100%\" }}>\n        <Col span={8}>\n          <div style={{ fontSize: 40, padding: 20, textAlign: \"center\" }} >Demo Aimesoft</div>\n          <div style={{ padding: \"0 20px\" }}>\n            <label htmlFor=\"\">Username</label>\n            <Form.Item help={this.state.usernameErr}>\n              <Input\n                onChange={this.onChangeInput(\"username\")}\n                onBlur={this.onBlur(\"username\")}\n              />\n            </Form.Item>\n            <label htmlFor=\"\">Password</label>\n            <Form.Item help={this.state.passwordErr}>\n              <Input.Password\n                onChange={this.onChangeInput(\"password\")}\n                onBlur={this.onBlur(\"password\")}\n              />\n            </Form.Item>\n            <Form.Item help={this.state.message} className=\"login_submit\">\n              <div style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\n                <Button type=\"primary\" onClick={this.login} disabled={this.state.disabled}>\n                  Login\n              </Button>\n              </div>\n            </Form.Item>\n          </div>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default withRouter(Login)","import React from 'react'\nimport { Table } from 'antd';\nimport Axios from 'axios';\nimport { GET_DATA_URL } from '../../constant';\n\nconst columns = [\n  {\n    title: 'Province',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Population',\n    dataIndex: 'population',\n    key: 'population',\n    width: '30%',\n  },\n];\n\nclass Address extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expandedRowKeys: [],\n      datasource: [],\n      loading: true,\n      getedDistrict: []\n    }\n  }\n\n  componentDidMount() {\n    this.getListProvinces()\n  }\n\n  getListProvinces = async () => {\n    try {\n      const response = await Axios({\n        url: GET_DATA_URL + \"/get_provinces\",\n        method: \"GET\"\n      })\n      const fnsGetProvincePopulations = response.data.map(province => this.getProvincePopulation(province.id))\n      const provincePopulations = await Promise.all(fnsGetProvincePopulations);\n      const datasource = response.data.map((province, index) => {\n        return {\n          key: province.id,\n          name: province.name,\n          population: provincePopulations[index],\n          districts: []\n        }\n      })\n      this.setState({ datasource, loading: false })\n    } catch (error) {\n\n    }\n  }\n\n  getProvincePopulation = async (id) => {\n    try {\n      const response = await Axios({\n        url: `${GET_DATA_URL}/province_population?province_id=${id}`,\n        method: \"GET\",\n      })\n      return response.data.population\n    } catch (error) {\n\n    }\n  }\n\n  getDistrictPopulation = async (proId, disId) => {\n    try {\n      const response = await Axios({\n        url: `${GET_DATA_URL}/district_population?province_id=${proId}&district_id=${disId}`,\n        method: \"GET\",\n      })\n      return response.data.population\n    } catch (error) {\n\n    }\n  }\n\n  getDistrict = async (id) => {\n    try {\n      const response = await Axios({\n        url: GET_DATA_URL + \"/get_districts?province_id=\" + id,\n        method: \"GET\",\n      })\n      return response.data\n    } catch (error) {\n\n    }\n  }\n\n  onExplandedProvince = async (expanded, record) => {\n    const expandedRowKeys = this.state.expandedRowKeys;\n    if (expanded) {\n      expandedRowKeys.push(record.key);\n\n      if (this.state.getedDistrict.includes(record.key)) {\n        return this.setState({ expandedRowKeys })\n      }\n\n      this.setState({ loading: true })\n\n      const districts = await this.getDistrict(record.key)\n\n      const fnsGetDistrictPopulations = districts.map(district => this.getDistrictPopulation(record.key, district.id));\n      const districtPopulations = await Promise.all(fnsGetDistrictPopulations);\n\n      const districtsMap = districts.map((district, index) => ({\n        key: district.id,\n        name: district.name,\n        population: districtPopulations[index]\n      }))\n\n      const datasource = this.state.datasource.map(province => {\n        if (province.key === record.key) {\n          province.districts = districtsMap\n        }\n        return province\n      })\n\n      const getedDistrict = this.state.getedDistrict;\n      getedDistrict.push(record.key);\n\n      return this.setState({ expandedRowKeys, datasource, getedDistrict, loading: false })\n    }\n    expandedRowKeys.splice(expandedRowKeys.indexOf(record.key), 1)\n    return this.setState({ expandedRowKeys })\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"60%\", margin: \"auto\" }}>\n        <Table\n          loading={this.state.loading}\n          columns={columns}\n          dataSource={this.state.datasource}\n          onExpand={this.onExplandedProvince}\n          expandedRowKeys={this.state.expandedRowKeys}\n          expandedRowRender={(record) => {\n            const rowColumns = [\n              {\n                title: 'District',\n                dataIndex: 'name',\n                key: 'name',\n              },\n              {\n                title: 'Population',\n                dataIndex: 'population',\n                key: 'population',\n                width: '30%',\n              },\n            ];\n            return <Table columns={rowColumns} dataSource={record.districts} pagination={false} />\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Address","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './components/Routes/PrivateRoute';\nimport PublicRoute from './components/Routes/PublicRoute';\nimport Login from './views/Login';\nimport Address from './views/Address'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={Address} />\n          <PublicRoute exact path=\"/login\" component={Login} />\n          <PrivateRoute exact path=\"/address\" component={Address} />\n          <Route exact path='*' component={p => (<div>Not found</div>)} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}